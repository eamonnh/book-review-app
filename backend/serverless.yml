service:
  name: serverless-book-review-app

plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function

provider:
  name: aws
  runtime: nodejs12.x

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'eu-west-1'}

  environment:
    REVIEWS_TABLE: Reviews-${self:provider.stage}
    INDEX_NAME: ReviewsIndex
    ATTACHMENTS_S3_BUCKET: book-reviews-app-attachments-eam-${self:provider.stage}
    SIGNED_URL_EXPIRATION: 300

functions:

  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler

  GetReviews:
    handler: src/lambda/http/getReviews.handler
    events:
      - http:
          method: get
          path: reviews
    iamRoleStatements:
      - Effect: Allow
        Action: dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.REVIEWS_TABLE}/index/${self:provider.environment.INDEX_NAME}
  
  CreateReview:
    handler: src/lambda/http/createReview.handler
    events:
      - http:
          method: post
          path: reviews
    iamRoleStatements:
      - Effect: Allow
        Action: dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.REVIEWS_TABLE}

  UpdateReview:
    handler: src/lambda/http/updateReview.handler
    events:
      - http:
          method: patch
          path: reviews/{reviewId}
    iamRoleStatements:
      - Effect: Allow
        Action: dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.REVIEWS_TABLE}

  DeleteReview:
    handler: src/lambda/http/deleteReview.handler
    events:
      - http:
          method: delete
          path: reviews/{reviewId}
    iamRoleStatements:
      - Effect: Allow
        Action: dynamodb:DeleteItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.REVIEWS_TABLE}

  uploadUrl:
    handler: src/lambda/http/uploadUrl.handler
    events:
      - http:
          method: post
          path: reviews/{reviewId}/attachment
    iamRoleStatements:
      - Effect: Allow
        Action: dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.REVIEWS_TABLE}

resources:
  Resources:
    
    TodosTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: reviewId
            AttributeType: S
          - AttributeName: userId
            AttributeType: S
          - AttributeName: createdAt
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: reviewId
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.REVIEWS_TABLE}
        LocalSecondaryIndexes:
          - IndexName: ${self:provider.environment.INDEX_NAME}
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
              - AttributeName: createdAt
                KeyType: RANGE
            Projection:
              ProjectionType: ALL

    AttachmentsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.ATTACHMENTS_S3_BUCKET}
        CorsConfiguration:
          CorsRules:
            - AllowedOrigins:
                - "*"
              AllowedHeaders:
                - "*"
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000

    AttachmentsBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: MyPolicy
          Version: "2012-10-17"
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: "*"
              Action: ["s3:GetObject", "s3:Put*"]
              Resource: "arn:aws:s3:::${self:provider.environment.ATTACHMENTS_S3_BUCKET}/*"
        Bucket: { Ref: AttachmentsBucket }